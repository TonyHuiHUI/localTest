<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:soa="http://soa-springtag.dapeng.com/schema/service"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://soa-springtag.dapeng.com/schema/service
        http://soa-springtag.dapeng.com/schema/service/service.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--参数配置-->
    <context:property-placeholder location="classpath:config.properties" local-override="false"
                                  system-properties-mode="ENVIRONMENT"/>

    <context:component-scan base-package="com.test"/>

    <bean id="knight" class="com.test.spring.knight.BraveKnight">
        <constructor-arg ref="quest"/>
    </bean>

    <bean id="quest" class="com.test.spring.knight.SlayDragonQuest">
        <constructor-arg value="#{T(System).out}"/>
    </bean>

    <bean id="minstrel" class="com.test.spring.knight.Minstrel">
        <constructor-arg value="#{T(System).out}"/>
    </bean>

  <aop:config>
        <aop:aspect ref="minstrel">
            <aop:pointcut id="embark" expression="execution(* *.embarkOnQuest(..))"/>
            <aop:before pointcut-ref="embark" method="singBeforeQuest"/>
            <aop:after pointcut-ref="embark" method="singAfterQuest"/>
        </aop:aspect>
    </aop:config>


    <!-- <bean class="com.github.dapeng.spring.support.process.SoaServiceProcessor" lazy-init="false"/>-->

    <!--    <bean id="demoTestService" class="com.today.service.demoService.DemoServiceImpl"/>
        <soa:service ref="demoTestService"/>-->

    <!-- <bean id="helloServiceA" class="com.today.service.serviceA.HelloServiceA1Impl"/>
     <soa:service ref="helloServiceA"/>


     <bean id="helloServiceB" class="com.today.service.serviceB.HelloServiceB1Impl"/>
     <soa:service ref="helloServiceB"/>-->

    <bean id="slf4j-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="statementExecutableSqlLogEnable" value="true"/>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <bean id="hello_dataSource" class="com.today.commons.datasource.DapengDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${DB_DEMO_URL}"/>
        <property name="username" value="${DB_DEMO_USER}"/>
        <property name="password" value="${DB_DEMO_PASSWD}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="20"/>
        <property name="maxActive" value="100"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>

        <property name="connectionInitSqls" value="set names utf8mb4;"/>

        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="slf4j-filter"/>
            </list>
        </property>
    </bean>

    <!-- 配置spring的PlatformTransactionManager，名字为默认值 -->
    <bean id="hello_readOnly_transactionManager"
          class="com.today.service.commons.transcation.DataSourceTransactionManagerSpread">
        <property name="dataSource" ref="hello_dataSource"/>
        <property name="enforceReadOnly" value="true"></property>
    </bean>
    <!--使用事务敏感bean-->
    <bean id="tx_hello_dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="hello_dataSource"/>
    </bean>


</beans>